#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const zlib = require('zlib');
const rollup = require('rollup');
const uglify = require('uglify-js');
const buble = require('rollup-plugin-buble');
const cliConfig = require('node-cli-config');
const ObjectAssign = require('object-assign');

const curDirPath = process.cwd();
const config = require(curDirPath + '/package.json');
const rc = cliConfig({ dir: '.', file: '.npmrc' });
const exists = fs.existsSync;
const name = config.name;
const version = config.version;

Object.assign = ObjectAssign;

rc.echo = (isJson) => {
  const infoArr = [`; npmrc ${rc.spmrcfile}`];
  if (fs.existsSync(rc.spmrcfile)) {
    infoArr.push(isJson ? rc.config() : fs.readFileSync(rc.spmrcfile, 'utf8'));
  }
  return infoArr;
};

let modulePath = rc.echo(true)[1].bz_mod;

if (typeof modulePath === 'undefined') {
  console.log('请先配置模块所在目录');
  console.log('Example: npm config set bz-mod "D:\\source"');
  throw new Error('没有配置模块路径');
} else if (!exists(modulePath)) {
  throw new Error('模块目录不存在，请检查配置的模块目录是否正确');
} else {
  modulePath = path.join(modulePath, name);
  if (!exists(modulePath)) {
    fs.mkdirSync(modulePath);
  }
  
  modulePath = path.join(modulePath, version);
  if (!exists(modulePath)) {
    fs.mkdirSync(modulePath);
  }
}

const buildConfs = {}
const defaultBuildConfs = {
  'dist-common': {
    input: curDirPath + '/src/index.js',
    format: 'umd',
    moduleName: name,
    output: path.join(curDirPath + '/dist/', name + '.umd.js')
  },
  'dist-esm': {
    input: curDirPath + '/src/index.js',
    format: 'es',
    moduleName: name,
    output: path.join(curDirPath + '/dist/', name + '.esm.js')
  }
};
if (exists(curDirPath + '/build.config.js')) {
  const configs = require(curDirPath + '/build.config.js');
  Object.assign(buildConfs, defaultBuildConfs, configs);
} else {
  Object.assign(buildConfs, defaultBuildConfs)
}

function getConfig(opts) {
  const config = {
    input: opts.input,
    output: {
      file: opts.output,
      format: opts.format,
      name: opts.moduleName
    },
    plugins: [
      buble()
    ].concat(opts.plugins || [])
  };

  return config;
}

const builds = Object.keys(buildConfs).map(name => getConfig(buildConfs[name]));
build(builds);

function build (builds) {
  let built = 0;
  const total = builds.length;
  const next = () => {
    buildEntry(builds[built]).then(() => {
      built++;
      if (built < total) {
        next();
      }
    }).catch(logError);
  };

  next();
}

function buildEntry (config) {
  const isProd = !/debug\.js$/.test(config.output.file) && !/(\w+\.){2}js$/.test(config.output.file);
  return rollup.rollup(config)
    .then(bundle => bundle.generate(config.output))
    .then(({ code }) => {
      if (isProd) {
        var minified = uglify.minify(code, {
          output: {
            ascii_only: true
          },
          compress: {
            pure_funcs: ['makeMap']
          }
        }).code;
        return write(config.output.file, minified, true);
      } else {
        return write(config.output.file, code);
      }
    });
}

// 输出文件并显示文件大小
function write (dest, code, zip) {
  return new Promise((resolve, reject) => {
    function report (extra) {
      console.log(blue(path.relative(process.cwd(), dest)) + ' ' + getSize(code) + (extra || ''));
      resolve();
    }

    fs.writeFile(dest, code, err => {
      if (err) return reject(err);
      if (zip) {
        zlib.gzip(code, (err, zipped) => {
          if (err) return reject(err);
          report(' (gzipped: ' + getSize(zipped) + ')');
        });
      } else {
        report();
      }
    });
  });
}

// 获取生成的文件大小
function getSize (code) {
  return (code.length / 1024).toFixed(2) + 'kb';
}

function logError (e) {
  console.log(e);
}

function blue (str) {
  return '\x1b[1m\x1b[34m' + str + '\x1b[39m\x1b[22m';
}
