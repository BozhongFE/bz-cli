#!/usr/bin/env node

// nodejs module
const { resolve } = require('path');
// gulp module
const lazypipe = require('lazypipe');
const gulp = require('gulp');
const gulpif = require('gulp-if');
const rename = require('gulp-rename');
const less = require('gulp-less');
const cleanCSS = require('gulp-clean-css');
const autoprefixer = require('gulp-autoprefixer');
// base module
const { getPackage, exists, error, cwd, debug } = require('../libs/utils');
// application variable
const pkg = getPackage();
const app = pkg.application || {};
let appLess = app.less || [initAppLess()];

// appLess = appLess.map(initAppLess)
appLess = appLess.filter((item, index) => {
  item.__index__ = index;
  // from's file exists?
  if (!exists(item.from)) {
    error(`less来源路径[${index}]: ${item.from} Not Found`);
    return false;
  }
  // from's file is less?
  if (!/\.less$/.test(item.from)) {
    error(`less来源路径[${index}]: ${item.from} Not A Less File`);
    return false;
  }
  // to's file is css?
  if (item.to && !/\.css$/.test(item.to)) {
    error(`less结果路径[${index}]: ${item.to} Not A CSS File`);
    return false;
  }
  return true;
}).map(initAppLess);

appLess.map((item) => {
  const index = item.__index__;
  if (!exists(item.from)) {
    error(`less来源[${index}]:`, resolve(cwd, item.from), 'Not Found');
    return false;
  }
  debug(item.debug, `less来源路径[${index}]:`, item.from);
  debug(item.debug, `less结果路径[${index}]:`, item.to, item.cssmin ? '(cssmin)' : '');

  const cleanCSSLazypipe = getCleanCSS(item.cleanCSS, item.dirs);
  gulp.src(item.from)
    .pipe(less(item.less))
    .pipe(autoprefixer())
    .pipe(rename(item.name))
    .pipe(gulp.dest(item.dirs))
    .pipe(gulpif(item.cssmin, cleanCSSLazypipe()));
});

// init application.less config
function initAppLess(conf) {
  conf =  Object.assign({
    from: resolve(cwd, 'css/style.less'),
    debug: app.debug || true,
  }, conf);

  conf.from = resolve(cwd, conf.from);
  conf.to = conf.to ? resolve(cwd, conf.to) : resolve(cwd, conf.from.replace(/less$/i, 'css'));
  conf.name = conf.to.match(/[^/]+\.css$/i)[0];
  conf.dirs = conf.to.replace(/\/[^/]+\.css$/i, '');
  return conf;
}

function getCleanCSS(conf, dirs) {
  return lazypipe()
    .pipe(cleanCSS, conf)
    .pipe(gulp.dest, dirs);
}