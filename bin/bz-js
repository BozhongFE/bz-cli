#!/usr/bin/env node

// nodejs module
const { statSync, readJsonSync } = require('fs');
const { resolve } = require('path');
// commander
const program = require('commander');
const _ = require('lodash');
// gulp module
const gulp = require('gulp');
const watch = require('gulp-watch');
const gulpif = require('gulp-if');
const header = require('gulp-header');
const concat = require('gulp-concat');
const uglify = require('gulp-uglify');

// base module
const { getPackageSrc, exists, cwd, debounce } = require('../libs/utils');
const { debug, info, error } = require('../libs/log');
// global variable
const packageSrc = getPackageSrc();
let pkg = getPackage();
const ignoreFiles = {};

// define command
program
  .usage('[options]')
  .option('-w, --watch', 'listen for file changes')
  .parse(process.argv);

// application watch
if (program.watch) {
  watch([
    cwd + '/**/*.js',
    getPackageSrc(),
  ], {}, (vinyl) => {
    debounce(() => {
      if (vinyl.path.match(/.js$/)) {
        if (!ignoreFiles[vinyl.path]) {
          buildBefore(() => {
            info(`[${getTime()}]`, 'js 合并压缩开始');
            const appJS = pkg.application.js.filter((item) => item.from.indexOf(vinyl.path) >= 0);
            build(appJS);
            info(`[${getTime()}]`, 'js 合并压缩结束');
          });
        }
      } else if (vinyl.path.match(/package\.json$/)) {
        buildBefore(buildAll);
      }
    });
  });
}

buildBefore(buildAll);

function buildAll() {
  info(`[${getTime()}]`, 'js 合并压缩开始');
  const appJS = pkg.application.js.filter((item) => {
    for (const jsFile of item.from) {
      if (statSync(jsFile).mtime > new Date() - 24 * 3600000) {
        return item;
      }
    }
  });
  build(appJS);
  info(`[${getTime()}]`, 'js 合并压缩结束');
}

function buildBefore(callback) {
  pkg = getPackage();
  if (!pkg.application || !pkg.application.js || pkg.application.js.length === 0) {
    error('package.json.application.js 不能为空');
    return false;
  }

  pkg.application.js = pkg.application.js.filter((item, index) => {
    item.__index__ = index;
    // from is array?
    if (!_.isArray(item.from) || item.from.length === 0) {
      error(`application.js[${index}].from: Not Array Or Null`);
      return false;
    }
    const fromLength = item.from.length;
    for (let i = 0; i < fromLength; i += 1) {
      // from's file exists?
      if (!exists(item.from[i])) {
        error(`application.js[${index}].from[${i}]: ${item.from[i]} Not Found`);
        return false;
      }
      // from's file is js?
      if (!/\.js$/.test(item.from[i])) {
        error(`application.js[${index}].from[${i}]: ${item.from[i]} Not A JS File`);
        return false;
      }
    }

    // to's file is js?
    if (!item.to || !/\.js$/.test(item.to)) {
      error(`application.js[${index}].to: ${item.to} Not A JS File`);
      return false;
    }
    
    return true;
  }).map((item) => initAppJS(item, pkg.debug));
  callback && callback();
}

function build(appJS) {
  // application variable
  appJS.map((item) => {
    const index = item.__index__;
    debug(item.debug, `源文件[${index}]:`, item.from.join('\r\n        　　　   　'));
    debug(item.debug, `目标文件[${index}]:`, item.to, item.jsmin ? '(jsmin)' : '');
    ignoreFiles[item.to] = true;

    gulp.src(item.from)
      .pipe(gulpif(item.jsmin, uglify(item.uglifyjs)))
      .pipe(concat(item.name, Object.assign({
        newLine: '\r\n',
      }, item.concat)))
      .pipe(header(item.comment + item.header, {
        pkg,
        item,
      }))
      .pipe(gulp.dest(item.dirs));
  });
}

// init application.js config
function initAppJS(conf, isDebug) {
  conf =  Object.assign({
    debug: isDebug,
    comment: `/**
 * Date: ${new Date().toLocaleString()}
 * Include: ${conf.from}
 * For: ${conf.for || 'Not configured'}
 */
`,
    header: '',
    jsmin: false,
  }, conf);

  conf.from = conf.from.map((item) => resolve(cwd, item));
  conf.to = resolve(cwd, conf.to);
  conf.name = conf.to.match(/[^/]+\.js$/i)[0];
  conf.dirs = conf.to.replace(/\/[^/]+\.js$/i, '');
  return conf;
}

function getPackage() {
  const xpkg = readJsonSync(packageSrc);
  xpkg.application = xpkg.application || {};
  xpkg.application.js = xpkg.application.js || [];
  xpkg.debug = xpkg.application.debug || false;
  return xpkg;
}
function getTime() {
  const date = new Date();
  const format = num => num < 10 ? `0${num}` : num;
  const hour = format(date.getHours());
  const minute = format(date.getMinutes());
  const second = format(date.getSeconds());
  return `${hour}:${minute}:${second}`;
}